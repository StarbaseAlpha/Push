"use strict";function Push(publicKey){return"object"!=typeof window?(()=>{let messageHandler,clickHandler;return self.addEventListener("push",async e=>{let data={};e.data&&(data=e.data.json());let openClients=await clients.matchAll();if(openClients){let bg=!0;openClients.forEach(client=>{"visible"===client.visibilityState&&(bg=!1),client.postMessage({type:"push",data:data})}),bg&&messageHandler&&"function"==typeof messageHandler&&messageHandler(data)}else messageHandler&&"function"==typeof messageHandler&&messageHandler(data)}),self.addEventListener("notificationclick",e=>{clickHandler&&"function"==typeof clickHandler&&clickHandler(e.notification),e.notification.close()}),{onMessage:cb=>{messageHandler=cb},onClick:cb=>{clickHandler=cb}}})():(publicKey=>{let messageHandler;return navigator.serviceWorker.addEventListener("message",e=>{messageHandler&&"function"==typeof messageHandler&&e.data&&e.data.type&&"push"===e.data.type&&messageHandler(e.data.data||"")}),{onMessage:cb=>{messageHandler=cb},subscribe:async(url=null,token=null)=>{if("!PushManager"in window||"!Notification"in window)throw{message:"This browser or device does not support push notifications."};let permission=await Notification.requestPermission();if(!permission||"granted"!==permission)throw{message:"Notifications permission is required to subscribe to push notifications."};let subscription=await(await navigator.serviceWorker.getRegistration()).pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:(str=>new Uint8Array(atob(str.replace(/\-/g,"+").replace(/\_/g,"/")).split("").map(val=>val.charCodeAt(0))))(publicKey)}).then(result=>result.toJSON()).catch(err=>{console.log(err)});return url?fetch(url,{method:"POST",body:JSON.stringify({subscription:subscription,token:token}),headers:{"content-type":"application/json"}}).then(response=>({message:"Push notifications are enabled.",subscribed:!0,subscription:subscription})).catch(err=>(console.log(err),err)):{message:"Push notifications are available. You are not yet subscribed to a remote service.",subscribed:!1,subscription:subscription}},unsubscribe:async(url=null,token=null)=>{let subscription=await(await navigator.serviceWorker.getRegistration()).pushManager.getSubscription();return subscription&&await subscription.unsubscribe(),url?fetch(url,{method:"POST",body:JSON.stringify({subscription:subscription,token:token}),headers:{"content-type":"application/json"}}).then(response=>({unsubscribe:!0})).catch(err=>(console.log(err),err)):{unsubscribe:!0}},getPermission:Notification.requestPermission}})(publicKey)}